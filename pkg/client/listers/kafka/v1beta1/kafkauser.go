/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/dichque/strimzi-client/pkg/apis/kafka/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KafkaUserLister helps list KafkaUsers.
type KafkaUserLister interface {
	// List lists all KafkaUsers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.KafkaUser, err error)
	// KafkaUsers returns an object that can list and get KafkaUsers.
	KafkaUsers(namespace string) KafkaUserNamespaceLister
	KafkaUserListerExpansion
}

// kafkaUserLister implements the KafkaUserLister interface.
type kafkaUserLister struct {
	indexer cache.Indexer
}

// NewKafkaUserLister returns a new KafkaUserLister.
func NewKafkaUserLister(indexer cache.Indexer) KafkaUserLister {
	return &kafkaUserLister{indexer: indexer}
}

// List lists all KafkaUsers in the indexer.
func (s *kafkaUserLister) List(selector labels.Selector) (ret []*v1beta1.KafkaUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KafkaUser))
	})
	return ret, err
}

// KafkaUsers returns an object that can list and get KafkaUsers.
func (s *kafkaUserLister) KafkaUsers(namespace string) KafkaUserNamespaceLister {
	return kafkaUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KafkaUserNamespaceLister helps list and get KafkaUsers.
type KafkaUserNamespaceLister interface {
	// List lists all KafkaUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.KafkaUser, err error)
	// Get retrieves the KafkaUser from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.KafkaUser, error)
	KafkaUserNamespaceListerExpansion
}

// kafkaUserNamespaceLister implements the KafkaUserNamespaceLister
// interface.
type kafkaUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KafkaUsers in the indexer for a given namespace.
func (s kafkaUserNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KafkaUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KafkaUser))
	})
	return ret, err
}

// Get retrieves the KafkaUser from the indexer for a given namespace and name.
func (s kafkaUserNamespaceLister) Get(name string) (*v1beta1.KafkaUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kafkauser"), name)
	}
	return obj.(*v1beta1.KafkaUser), nil
}
